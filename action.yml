name: 'StackQL Studios - stackql-assert'
description: 'A wrapper for executing a single command, maps all stackql exec args to actions args (supplied using with.'
author: 'Yuncheng Yang, StackQL Studios'
inputs:
  auth_obj_path:
    description: file path to json object of stackql auth
    required: false
  auth_str:
    description: json string of stackql auth
    required: false
  test_query:
    description: stackql query to be executed
    required: false
  test_query_file_path:
    description: stackql query file to be executed
    required: false
  expected_rows: 
    description: expected number of rows from executing test query
    required: false
  expected_results:
    description: expected result from executing test query, support object string
    required: false
  expected_results_path:
    description: file that stores expected result, json and csv are support
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup StackQL
      uses: stackql/setup-stackql@v1.1.0
      with:
        use_wrapper: true

    - name: Setup auth
      id: setup-auth
      shell: bash
      run: |
        chmod +x ./action_scripts/set_auth_env.sh
        ./action_scripts/set_auth_env.sh
      env:
        AUTH_FILE: ${{inputs.auth_obj_path}}
        AUTH_STR: ${{inputs.auth_str}}

    - name: Execute query
      id: exec-query
      shell: bash
      run: |
        chmod +x ./action_scripts/execute.sh
        ./action_scripts/execute.sh
      env:
        QUERY_FILE_PATH: ${{ inputs.test_query_file_path }}
        QUERY: ${{inputs.test_query}}
        OUTPUT: 'json'
    
    - name: Check results
      uses: actions/github-script@v6
      with:
        script: |
          try{
            let execResult = process.env.RESULT

            ///remove the register pull line
            const registerPullPattern = /^[\w\s]+provider, version '.*' successfully installed\n\[.*\]$/;
            if(registerPullPattern.test(execResult)){
            const lines = execResult.split('\n')
            execResult = lines[1]
            }
            const expectedResult = JSON.parse(process.env.EXPECTED_RESULTS)
            const actualResult = JSON.parse(execResult)

            if(!actualResult){
                core.setFailed('No Output from executing query');
            }
            const equality = JSON.stringify(expectedResult) === JSON.stringify(actualResult)

            if(!equality){
            core.setFailed(`============ StackQL Assert Failed ============ \n
            Expected: ${JSON.stringify(expectedResult)} \n
            Actual: ${JSON.stringify(actualResult)}
            `)
            return false;
            }

            core.info('============ StackQL Assert Succeed ============ ')

          }catch(e){
            core.setFailed(e);
          }

        

      env:
        RESULT: ${{steps.exec-query.outputs.stdout}}
        EXPECTED_RESULTS: ${{ inputs.expected_results }}
        EXPECTED_RESULTS_FILE_PATH: ${{inputs.expected_results_path}}
        EXPECTED_ROWS: ${{inputs.expected_rows}}

    
      
branding:
  icon: 'terminal'
  color: 'green'